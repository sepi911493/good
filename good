// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.19;

interface IERC20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
}

contract EthTokenSwap {
    IERC20 public token;
    uint256 public rate;

    constructor(address _token, uint256 _rate) {
        token = IERC20(_token);
        rate = _rate;
    }

    function swapEthToToken() external payable {
        uint256 ethAmount = msg.value;
        uint256 tokenAmount = ethAmount * rate;

        require(token.balanceOf(address(this)) >= tokenAmount, "Insufficient token liquidity");
        require(token.transfer(msg.sender, tokenAmount), "Token transfer failed");
    }

    function swapTokenToEth(uint256 _tokenAmount) external {
        require(token.balanceOf(msg.sender) >= _tokenAmount, "Insufficient token balance");
        require(token.transferFrom(msg.sender, address(this), _tokenAmount), "Token transfer failed");

        uint256 ethAmount = _tokenAmount / rate;
        require(address(this).balance >= ethAmount, "Insufficient ETH liquidity");

        (bool success, ) = msg.sender.call{value: ethAmount}("");
        require(success, "ETH transfer failed");
    }
}
